/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ./src/models/gridPlane.glb 
*/

import React, { useEffect, useMemo, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { gltfModel } from "modal/modals";
import { Color } from "three";
import { useFrame } from "@react-three/fiber";

const fragmentShader = `
uniform vec3 u_colorA;
uniform vec3 u_colorB;
varying float vZ;


void main() {
  vec3 color = mix(u_colorA, u_colorB, vZ * 2.0 + 0.1); 
  gl_FragColor = vec4(color, 1.0);
}
`;
const vertexShader = `

uniform float u_time;

varying float vZ;

void main() {
  vec4 modelPosition = modelMatrix * vec4(position, 1.0);
  
  modelPosition.y += sin(modelPosition.x * 5.0 + u_time * 1.5) * 0.2;
  modelPosition.x += sin(modelPosition.y * 6.0 + u_time * 1.0) * 0.4;
  
  vZ = modelPosition.z;

  vec4 viewPosition = viewMatrix * modelPosition;
  vec4 projectedPosition = projectionMatrix * viewPosition;

  gl_Position = projectedPosition;
}
`;
//0x5350ff
export default function GridPlane(props) {
  const { nodes, materials } = useGLTF("/gridPlane.glb");
  const mesh = useRef();

  const uniforms = useMemo(
    () => ({
      u_time: {
        value: 0.0,
      },
      u_colorA: { value: new Color("#FFE486") },
      u_colorB: { value: new Color("#FEB3D9") },
    }),
    []
  );

  useFrame((state) => {
    const { clock } = state;

    mesh.current.material.uniforms.u_time.value = clock.getElapsedTime();
  });

  return (
    <mesh position={[0, 0, 0]} rotation={[0, 0, 0]} scale={1.5}>
      <mesh ref={mesh} geometry={nodes.Plane005_1.geometry} material={"attach"}>
        <shaderMaterial
          fragmentShader={fragmentShader}
          vertexShader={vertexShader}
          wireframe={true}
          uniforms={uniforms}
        />
      </mesh>
    </mesh>
  );
}

/**
 
const { scrollCount } = props;
  const { nodes, materials } = useGLTF("/gridPlane.glb");
  const planeRef = useRef(null);
  const mesh = useRef();

  const uniforms = useMemo(
    () => ({
      u_time: {
        value: 0.0,
      },
      u_colorA: { value: new Color("#FFE486") },
      u_colorB: { value: new Color("#FEB3D9") },
    }),
    []
  );

  useFrame((state) => {
    const { clock } = state;
    mesh.current.material.uniforms.u_time.value = clock.getElapsedTime();
  });

  return (
    <group ref={planeRef} {...props} dispose={null}>
      <mesh
        ref={mesh}
        position={[0, 0, 0]}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={1.5}
      >
        <planeGeometry args={[10, 10, 16, 16]} />
        <shaderMaterial
          fragmentShader={fragmentShader}
          vertexShader={vertexShader}
          uniforms={uniforms}
          wireframe={true}
        />
        <planeGeometry args={[10, 10, 16, 16]} />
        <meshStandardMaterial color={"red"}></meshStandardMaterial>
      </mesh>
      <mesh material={"attach" || undefined} geometry={nodes.Plane005.geometry}>
        <meshStandardMaterial color={"black"}></meshStandardMaterial>
      </mesh>
      <mesh geometry={nodes.Plane005_1.geometry} material={"attach"}>
        <shaderMaterial
          fragmentShader={fragmentShader}
          vertexShader={vertexShader}
          wireframe={true}
          uniforms={uniforms}
        />
      </mesh>
    </group>
  );
 */
useGLTF.preload("/gridPlane.glb");
