/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ./src/models/gridPlane.glb 
*/

import React, { useEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { gltfModel } from "modal/modals";

const fragmentShader = `
void main() {
  gl_FragColor = vec4(0.0, 0.3, 1.0, 1.0);
}
`;
const vertexShader = `
void main() {
  vec4 modelPosition = modelMatrix * vec4(position, 1.0);
  modelPosition.y += sin(modelPosition.x * 4.0) * 0.2;

  vec4 viewPosition = viewMatrix * modelPosition;
  vec4 projectedPosition = projectionMatrix * viewPosition;

  gl_Position = projectedPosition;
}

`;
//0x5350ff
export default function GridPlane(props) {
  const { scrollCount } = props;
  const { nodes, materials } = useGLTF("/gridPlane.glb");
  const planeRef = useRef(null);
  useEffect(() => {
    console.log("planeRef: ", planeRef.current.children[0]);
  }, [scrollCount]);

  /* console.log("aa ", materials["Material.033"]);
  console.log("aa2 ", nodes.Plane005.geometry);
  console.log("aa3 ", nodes.Plane005_1.geometry);*/
  return (
    <group ref={planeRef} {...props} dispose={null}>
      <mesh position={[0, 0, 0]} rotation={[-Math.PI / 2, 0, 0]} scale={1.5}>
        <planeGeometry args={[1, 1, 32, 32]} />
        <shaderMaterial
          fragmentShader={fragmentShader}
          vertexShader={vertexShader}
          wireframe
        />
      </mesh>
      <mesh material={"attach" || undefined} geometry={nodes.Plane005.geometry}>
        <meshStandardMaterial color={"black"}></meshStandardMaterial>
      </mesh>
      <mesh geometry={nodes.Plane005_1.geometry} material={"attach"}>
        <meshStandardMaterial
          color={0xff5504}
          emissive={0xff5504}
          emissiveIntensity={8}
          metalness={0.2}
          roughness={0.5}
        ></meshStandardMaterial>
      </mesh>
    </group>
  );
}

useGLTF.preload("/gridPlane.glb");
